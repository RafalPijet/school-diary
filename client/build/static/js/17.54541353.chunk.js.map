{"version":3,"sources":["components/common/ModalAreYouSure/ModalAreYouSure.js","images/teacherDesk.png","components/features/ClassesPanel/ClassesPanelStyle.js","components/features/ClassesPanel/ClassesPanel.js","components/features/ClassesPanel/ClassesPanelContainer.js","components/features/ClassesContent/ClassesContentStyle.js","components/features/NavClassPanel/NavClassPanelStyle.js","components/features/NavClassPanel/NavClassPanel.js","components/features/NavClassPanel/NavClassPanelContainer.js","components/features/ClassContent/ClassContentStyle.js","components/features/ClassContent/ClassContent.js","components/features/ClassContent/ClassContentContainer.js","components/features/ClassesContent/ClassesContent.js","components/features/ClassesContent/ClassesContentContainer.js","components/features/ClassesHandling/ClassesHandlingStyle.js","components/features/ClassesHandling/ClassesHandling.js","components/features/ClassesHandling/ClassesHandlingContainer.js","components/pages/Classes/Classes.js"],"names":["Transition","React","forwardRef","props","ref","direction","useStyles","makeStyles","theme","buttonRemove","color","palette","action","light","ModalAreYouSure","isOpen","isConfirm","description","otherProps","classes","open","TransitionComponent","onClose","keepMounted","aria-labelledby","aria-describedby","id","className","onClick","module","exports","componentStyle","root","width","display","justifyContent","alignItems","backgroundColor","adding","padding","style","smallSize","button","outline","primary","dark","input","minWidth","addClass","height","secondary","classGrade","classOptions","possibleNames","paddingTop","ClassesPanel","allClasses","loadTeachers","request","teachers","availableNames","getClassGrade","getPossibleTutors","tutorIsUse","setTutorIsUse","useState","name","mainTeacher","newClass","setNewClass","isPossible","setIsPossible","availableTutors","setAvailableTutors","availableClassNames","setAvailableClassNames","setClassGrade","useEffect","length","prepareData","grade","type","result","possibleTutors","forEach","item","filter","substring","existedTutors","map","teacher","includes","Paper","elevation","paddingLeft","Typography","variant","FormControl","InputLabel","Select","labelId","value","onChange","event","target","MenuItem","key","Spinner","lastName","firstName","Tooltip","title","placement","arrow","Fade","enterDelay","IconButton","disabled","connect","state","getAllClasses","getRequest","getTeachers","getAvailableNames","getTutorIsUse","dispatch","loadTeachersRequest","payload","addClassRequest","isUse","flexDirection","baseSize","tabs","tab","fontWeight","content","marginTop","spacing","backgroundImage","image","backgroundPosition","backgroundRepeat","nothing","margin","buttons","main","second","selectTutor","descTutor","selectInput","replaceButton","tooltip","buttonsActive","buttonDelete","searchField","progress","cursor","NavClassPanel","classId","tutor","getModeStatus","subjects","getSelectedSubject","getFilteredStudents","isChanging","updateTutor","confirmUpdate","getIsTutor","setModalYesNot","newTutor","setNewTutor","isStudentsMode","setIsStudentsMode","isTeachersMode","setIsTeachersMode","selectedSubject","setSelectedSubject","filteredStudents","setFilteredStudents","isDeleteVisible","setIsDeleteVisible","updating","Grid","container","justify","lg","component","geting","size","fontSize","Button","clsx","Zoom","in","TextField","hidden","label","subject","i","data","classItem","updateTutorClassRequest","paper","overflow","transition","moreWidth","duplicate","spinner","not","a","b","indexOf","intersection","ClassContent","freeStudents","availableSubjects","updateClass","studentMode","checked","setChecked","students","leftList","setLeftList","subjectTeachers","rightList","setRightList","leftDesc","setLeftDesc","rightDesc","setRightDesc","isVisible","setIsVisible","isShowButtons","setIsShowButtons","isStudentMode","setIsStudentMode","isTeacherMode","setIsTeacherMode","isTypeStudent","setIsTypeStudent","isTypeTeacher","setIsTypeTeacher","freeTeachers","setFreeTeachers","setIsChanging","subjectDuplicates","setSubjectDuplicates","isTutor","setIsTutor","findDuplicates","arr","index","prepareFreeTeachers","setTimeout","first","student","counter","leftChecked","rightChecked","isStudents","teachersClassId","handleToggle","currentIndex","newChecked","push","splice","rowItem","isStudent","duplicates","birthDate","whiteSpace","customList","items","List","dense","role","ListItem","ListItemText","ListItemIcon","Checkbox","tabIndex","disableRipple","inputProps","sort","sortByLastnameFromAToZ","concat","aria-label","toLowerCase","getSubjects","getFreeStudents","updateClassRequest","ClassesContent","allStudents","getStudentsById","classesStudents","setFreeStudents","setSelectedClass","selectedClass","loadDataForClass","modalYesNot","deleteClass","setAddingIsDone","addingIsDone","setValue","newValue","setNewValue","isShow","setIsShow","isPrepare","setIsPrepare","filteredClass","setFilteredClass","classGradeIn","setClassGradeIn","isDelete","setIsDelete","prepareContentClass","prepareFreeStudents","sortByNameFromAToZ","Object","entries","find","changeClass","removeClass","deleteGo","AppBar","position","Tabs","textColor","indicatorColor","scrollButtons","Tab","a11yProps","marginLeft","timeout","onExited","getAllStudents","getClassesStudents","getIsStudentMode","getSelectedClass","getModalYesNot","getAddingIsDone","studentsId","getStudentsByIdRequest","loadDataForClassByIdRequest","deleteClassByIdRequest","isDone","contentHeight","ClassesHandling","loadAllClasses","loadAllStudents","loadStudentsIdFromClasses","resetRequest","alertSuccess","setAlertSuccess","clearAllClasses","clearAllStudents","clearFreeStudents","clearClassesStudents","clearSelectedClass","clearTeachers","setPossibleTutors","pending","success","error","Alert","isOpenAlert","handleCloseHandling","message","getAlertSuccess","setClassesStudents","loadAllClassesRequest","getStudentsIdRequest","Classes","PageTitle"],"mappings":"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","file":"static/js/17.54541353.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst useStyles = makeStyles(theme => ({\n    buttonRemove: {\n        color: theme.palette.action.light\n    }\n}));\n\nconst ModalAreYouSure = props => {\n    const {isOpen, isConfirm, description, ...otherProps} = props;\n    const classes = useStyles();\n\n    return (\n        <div>\n            <Dialog\n                open={isOpen}\n                TransitionComponent={Transition}\n                onClose={() => isConfirm(false)}\n                keepMounted\n                aria-labelledby=\"alert-dialog-slide-title\"\n                aria-describedby=\"alert-dialog-slide-description\"\n                {...otherProps}\n            >\n                <DialogTitle id='alert-dialog-slide-title'>\n                    Are you sure?\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        {description}\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button className={classes.buttonRemove} onClick={() => isConfirm(true)}>Delete</Button>\n                    <Button color='primary' onClick={() => isConfirm(false)}>Cancel</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    )\n};\n\nModalAreYouSure.propTypes = {\n    description: PropTypes.string.isRequired,\n    isOpen: PropTypes.bool.isRequired,\n    isConfirm: PropTypes.func.isRequired\n};\n\nexport default ModalAreYouSure;\n","module.exports = __webpack_public_path__ + \"static/media/teacherDesk.eea30744.png\";","import {style} from \"../../../styles/global\";\n\nconst componentStyle = theme => ({\n    root: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n        alignItems: 'center',\n        backgroundColor: theme.palette.action.adding,\n        padding: style.smallSize\n    },\n    button: {\n        outline: 'none !important',\n        backgroundColor: theme.palette.primary.dark,\n        '&:hover': {backgroundColor: theme.palette.action.dark}\n    },\n    input: {\n        minWidth: '180px'\n    },\n    addClass: {\n        width: '600px',\n        height: '56px',\n        display: 'inline-flex',\n        justifyContent: 'space-around',\n        padding: style.smallSize,\n        backgroundColor: theme.palette.secondary.dark,\n        alignItems: 'center'\n    },\n    classGrade: {\n        display: 'inline-flex',\n        justifyContent: 'center',\n        width: '250px'\n    },\n    classOptions: {\n        display: 'inline-flex',\n        width: '180px',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    },\n    possibleNames: {\n        width: '115px'\n    },\n    className: {\n        paddingTop: '13px'\n    }\n});\n\nexport default componentStyle;\n","import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {\n    Paper,\n    IconButton,\n    Tooltip,\n    Fade,\n    Select,\n    FormControl,\n    MenuItem,\n    InputLabel,\n    Typography\n} from \"@material-ui/core\";\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\nimport Spinner from \"../../common/Spinner/Spinner\";\nimport componentStyle from './ClassesPanelStyle'\n\nconst useStyles = makeStyles(theme => componentStyle(theme));\n\nconst ClassesPanel = props => {\n    const {\n        allClasses,\n        addClass,\n        loadTeachers,\n        request,\n        teachers,\n        availableNames,\n        getClassGrade,\n        getPossibleTutors,\n        tutorIsUse,\n        setTutorIsUse\n    } = props;\n    const [newClass, setNewClass] = useState({\n        name: '',\n        mainTeacher: 'unselected',\n    });\n    const [isPossible, setIsPossible] = useState(false);\n    const [availableTutors, setAvailableTutors] = useState([]);\n    const [availableClassNames, setAvailableClassNames] = useState([]);\n    const [classGrade, setClassGrade] = useState('none');\n    const classes = useStyles();\n\n    useEffect(() => {\n        setIsPossible(newClass.mainTeacher !== 'unselected');\n\n        if (teachers.length === 0) loadTeachers();\n        if (allClasses.length && teachers.length && tutorIsUse) prepareData();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [availableNames.grade, availableNames.type, classGrade,\n        teachers, newClass.mainTeacher, allClasses, tutorIsUse]);\n\n    const prepareData = () => {\n        let result = [];\n        let possibleTutors = [];\n        availableNames.grade.forEach(grade => {\n            availableNames.type.forEach(type => {\n                result = [...result, `${grade} ${type}`]\n            })\n        });\n        allClasses.forEach(item => {\n            result = result.filter(name => name !== item.name.substring(6, item.name.length));\n        });\n\n        if (classGrade !== 'none') {\n            result = result.filter(name => name.substring(0, 1) === classGrade)\n        }\n        setAvailableClassNames(result);\n\n        if (newClass.mainTeacher === 'unselected') setNewClass({...newClass, name: result[0]});\n        let existedTutors = allClasses.map(item => item.mainTeacher.id);\n        teachers.forEach(teacher => {\n\n            if (!existedTutors.includes(teacher.id)) {\n                possibleTutors = [...possibleTutors, teacher];\n                setAvailableTutors(possibleTutors);\n                getPossibleTutors(possibleTutors);\n            }\n        });\n\n        if (existedTutors.length === teachers.length) {\n            setAvailableTutors([]);\n            getPossibleTutors([]);\n        }\n        setTutorIsUse(false);\n    };\n\n    const addClassHandling = () => {\n        newClass.name = `Class ${newClass.name}`;\n        addClass(newClass);\n        setNewClass({name: '', mainTeacher: 'unselected'});\n    };\n\n    const handleTutorChange = event => {\n        setNewClass({...newClass, mainTeacher: event.target.value});\n    };\n\n    const handleClassGrade = event => {\n        setClassGrade(event.target.value);\n        getClassGrade(event.target.value);\n        setTutorIsUse(true);\n    };\n\n    const handleClassName = event => {\n        setNewClass({...newClass, name: event.target.value})\n    };\n\n    return (\n        <Paper elevation={3} className={classes.root}>\n            <span style={{paddingLeft: '5px'}}>\n                classes: <Typography display='inline' variant='h6'>{allClasses.length}</Typography>\n            </span>\n            <span className={classes.classGrade}>\n                <FormControl>\n                <InputLabel id='choose-class-grade'>\n                    sort by class level\n                </InputLabel>\n                <Select\n                    className={classes.input}\n                    labelId='choose-class-grade'\n                    value={classGrade}\n                    onChange={handleClassGrade}\n                >\n                    <MenuItem value='none'>none</MenuItem>\n                    {availableNames.grade.map(item => {\n                        return <MenuItem key={item} value={item}>{`${item}th`}</MenuItem>\n                    })}\n                </Select>\n            </FormControl>\n            </span>\n            <Paper variant='outlined' className={classes.addClass}>\n                {request.adding ? <Spinner/> :\n                    <>\n                        <span className={classes.classOptions}>\n                    <Typography className={classes.className} variant='subtitle1'>Class</Typography>\n                    <FormControl className={classes.possibleNames}>\n                        <InputLabel id='class-names' style={{width: 150}}>available names</InputLabel>\n                        <Select\n                            labelId='class-names'\n                            value={newClass.name}\n                            onChange={handleClassName}\n                        >\n                            {availableClassNames.map(name => {\n                                return <MenuItem key={name} value={name}>{name}</MenuItem>\n                            })}\n                        </Select>\n                    </FormControl>\n                </span>\n                        <FormControl>\n                            <InputLabel id='choose-teacher'>\n                                choose class teacher\n                            </InputLabel>\n                            <Select\n                                className={classes.input}\n                                labelId='choose-teacher'\n                                value={newClass.mainTeacher}\n                                onChange={handleTutorChange}\n                            >\n                                <MenuItem value='unselected'>unselected</MenuItem>\n                                {availableTutors.map(item => {\n                                    return <MenuItem key={item.id}\n                                                     value={item}>{`${item.lastName} ${item.firstName}`}</MenuItem>\n                                })}\n                            </Select>\n                        </FormControl>\n\n                        <Tooltip\n                            title='Add class'\n                            placement='bottom'\n                            arrow\n                            TransitionComponent={Fade}\n                            enterDelay={1000}\n                        >\n                    <span>\n                    <IconButton\n                        className={classes.button}\n                        onClick={addClassHandling}\n                        disabled={!isPossible}\n                    >\n                        <GroupAddIcon/>\n                    </IconButton>\n                        </span>\n                        </Tooltip>\n                    </>\n                }\n            </Paper>\n        </Paper>\n    )\n};\n\nClassesPanel.propTypes = {\n    allClasses: PropTypes.array.isRequired,\n    request: PropTypes.object.isRequired,\n    loadTeachers: PropTypes.func.isRequired,\n    teachers: PropTypes.array.isRequired,\n    addClass: PropTypes.func.isRequired,\n    availableNames: PropTypes.object.isRequired,\n    getClassGrade: PropTypes.func.isRequired,\n    getPossibleTutors: PropTypes.func.isRequired,\n    tutorIsUse: PropTypes.bool.isRequired,\n    setTutorIsUse: PropTypes.func.isRequired,\n};\n\nexport default ClassesPanel;\n","import {connect} from 'react-redux';\nimport ClassesPanel from './ClassesPanel';\nimport {getAllClasses, getAvailableNames} from \"../../../redux/actions/classActions\";\nimport {loadTeachersRequest, addClassRequest} from \"../../../redux/thunks\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {getTeachers} from \"../../../redux/actions/usersActions\";\nimport {getTutorIsUse, setTutorIsUse} from \"../../../redux/actions/valuesActions\";\n\nconst mapStateToProps = state => ({\n    allClasses: getAllClasses(state),\n    request: getRequest(state),\n    teachers: getTeachers(state),\n    availableNames: getAvailableNames(state),\n    tutorIsUse: getTutorIsUse(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    loadTeachers: () => dispatch(loadTeachersRequest()),\n    addClass: payload => dispatch(addClassRequest(payload)),\n    setTutorIsUse: isUse => dispatch(setTutorIsUse(isUse))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClassesPanel);\n","import {style} from \"../../../styles/global\";\nimport image from '../../../images/teacherDesk.png';\n\nconst componentStyle = theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        width: '100%',\n        paddingTop: style.baseSize,\n\n    },\n    tabs: {\n        backgroundColor: theme.palette.action.tab,\n        fontWeight: 800\n    },\n    content: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        backgroundColor: theme.palette.secondary.dark,\n        width: '100%',\n        height: '430px',\n        marginTop: theme.spacing(1),\n        backgroundImage: `url(${image})`,\n        backgroundPosition: 'center',\n        backgroundRepeat: 'no-repeat'\n    },\n    nothing: {\n        height: '500px'\n    }\n});\n\nexport default componentStyle;\n","const componentStyle = theme => ({\n    root: {\n        width: '100%',\n        margin: '7px',\n        backgroundColor: theme.palette.secondary.dark\n    },\n    buttons: {\n        outline: 'none !important',\n        color: theme.palette.primary.main\n    },\n    second: {\n        display: 'flex',\n        height: '95px',\n        flexDirection: 'column',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    },\n    selectTutor: {\n        width: '100%',\n        display: 'inline-flex',\n        justifyContent: 'space-around',\n        alignItems: 'center'\n    },\n    descTutor: {\n        width: '100%',\n        display: 'inline-flex',\n        justifyContent: 'center',\n    },\n    selectInput: {\n        width: '250px'\n    },\n    replaceButton: {\n        outline: 'none !important',\n        backgroundColor: theme.palette.primary.dark,\n        '&:hover': {backgroundColor: theme.palette.action.dark}\n    },\n    tooltip: {\n        backgroundColor: theme.palette.secondary.light\n    },\n    buttonsActive: {\n        outline: 'none !important',\n        backgroundColor: theme.palette.primary.dark,\n        '&:hover': {\n            backgroundColor: theme.palette.action.dark\n        }\n    },\n    buttonDelete: {\n        outline: 'none !important',\n        backgroundColor: theme.palette.primary.light,\n        color: theme.palette.action.light,\n        '&:hover': {\n            color: theme.palette.action.main\n        }\n    },\n    searchField: {\n        padding: '5px'\n    },\n    progress: {\n        cursor: 'progress !important'\n    }\n});\n\nexport default componentStyle;\n","import React, {useState, useEffect} from \"react\";\nimport PropTypes from 'prop-types';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport clsx from \"clsx\";\nimport {\n    Paper,\n    Button,\n    Typography,\n    FormControl,\n    InputLabel,\n    Select,\n    MenuItem,\n    Grid,\n    IconButton,\n    Tooltip,\n    Fade,\n    TextField,\n    Zoom\n} from \"@material-ui/core\";\nimport SwapHorizIcon from '@material-ui/icons/SwapHoriz';\nimport SupervisedUserCircleIcon from '@material-ui/icons/SupervisedUserCircle';\nimport SchoolIcon from '@material-ui/icons/School';\nimport DoneIcon from '@material-ui/icons/Done';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport componentStyle from \"./NavClassPanelStyle\";\n\nconst useStyles = makeStyles(theme => componentStyle(theme));\n\nconst NavClassPanel = props => {\n    const {\n        request,\n        classId,\n        name,\n        tutor,\n        possibleTutors,\n        getModeStatus, subjects,\n        getSelectedSubject,\n        getFilteredStudents,\n        isChanging,\n        updateTutor,\n        confirmUpdate,\n        getIsTutor,\n        setModalYesNot\n    } = props;\n    const classes = useStyles();\n    const [newTutor, setNewTutor] = useState('unselected');\n    const [isPossible, setIsPossible] = useState(false);\n    const [isStudentsMode, setIsStudentsMode] = useState(false);\n    const [isTeachersMode, setIsTeachersMode] = useState(false);\n    const [selectedSubject, setSelectedSubject] = useState('all');\n    const [filteredStudents, setFilteredStudents] = useState('');\n    const [isDeleteVisible, setIsDeleteVisible] = useState(true);\n\n    useEffect(() => {\n        setIsPossible(newTutor !== 'unselected' && !isStudentsMode && !isTeachersMode);\n        getModeStatus(isStudentsMode, isTeachersMode);\n\n        if (request.updating) {\n            setIsStudentsMode(false);\n            setIsTeachersMode(false);\n            setIsPossible(false);\n        }\n\n        setIsDeleteVisible(!isStudentsMode && !isTeachersMode && !request.updating);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [newTutor, isStudentsMode, isTeachersMode, request.updating]);\n\n    const handleNewTutor = event => {\n        setNewTutor(event.target.value)\n    };\n\n    const handleSelectedSubject = event => {\n        setSelectedSubject(event.target.value);\n        getSelectedSubject(event.target.value);\n    };\n\n    const handleFilteredStudents = event => {\n        setFilteredStudents(event.target.value);\n        getFilteredStudents(event.target.value);\n    };\n\n    const replaceTutorHandling = () => {\n\n        if (newTutor !== 'unselected') {\n            updateTutor({id: classId, mainTeacher: newTutor});\n            setNewTutor('unselected');\n            getIsTutor(true)\n        }\n    };\n\n    const removeClass = () => {\n        setModalYesNot(true, {\n            description: `Do you want remove ${name}?`,\n            data: {id: classId}\n        });\n    };\n\n    return (\n        <Paper variant='outlined' className={classes.root}>\n            <Grid container justify='space-between' alignItems='center'>\n                <Grid item lg={5}>\n                    <div className={classes.descTutor}>\n                        <Typography display='inline' component='p' color='textSecondary'>\n                            class teacher:\n                        </Typography>\n                        <Typography\n                            display='inline'\n                            component='p'\n                            color='textPrimary'\n                            style={{paddingLeft: '10px', fontWeight: 700}}\n                        >\n                            {` ${tutor.lastName} ${tutor.firstName}`}\n                        </Typography>\n                    </div>\n                    <div className={classes.selectTutor}>\n                        <FormControl\n                            disabled={isTeachersMode || isStudentsMode || request.updating}\n                            className={classes.selectInput}\n                        >\n                            <InputLabel id='replace-tutor'>\n                                replace\n                            </InputLabel>\n                            <Select\n                                labelId='replace-tutor'\n                                value={newTutor}\n                                onChange={handleNewTutor}\n                            >\n                                <MenuItem value='unselected'>unselected</MenuItem>\n                                {possibleTutors.map(tutor => {\n                                    return (\n                                        <MenuItem key={tutor.id} value={tutor}>\n                                            {`${tutor.lastName} ${tutor.firstName}`}\n                                        </MenuItem>\n                                    )\n                                })}\n                            </Select>\n                        </FormControl>\n                        <Tooltip\n                            title='Replace class teacher'\n                            classes={{tooltip: classes.tooltip}}\n                            placement='top'\n                            arrow\n                            TransitionComponent={Fade}\n                            enterDelay={1000}\n                        >\n                            <span className={(request.updating || request.geting) ? classes.progress : ''}>\n                                <IconButton\n                                    size='small'\n                                    disabled={!isPossible || request.updating}\n                                    className={classes.replaceButton}\n                                    onClick={replaceTutorHandling}\n                                >\n                                    <DoneIcon fontSize='small'/>\n                                </IconButton>\n                            </span>\n                        </Tooltip>\n                    </div>\n\n                </Grid>\n                <Grid item lg={2} className={classes.second}>\n                    <Tooltip\n                        title={isStudentsMode ? 'OFF students list change mode' : 'ON students list change mode'}\n                        classes={{tooltip: classes.tooltip}}\n                        placement='left'\n                        arrow\n                        TransitionComponent={Fade}\n                        enterDelay={1000}\n                    >\n                        <span className={request.updating ? classes.progress : ''}>\n                            <Button\n                                variant='outlined'\n                                disabled={request.updating}\n                                className={clsx(classes.buttons, isStudentsMode && classes.buttonsActive)}\n                                onClick={() => {\n                                    setIsStudentsMode(!isStudentsMode);\n                                    setIsTeachersMode(false);\n                                    setFilteredStudents('');\n                                }}\n                            >\n                                <SwapHorizIcon/>\n                                <SchoolIcon/>\n                            </Button>\n                        </span>\n                    </Tooltip>\n                    <Tooltip\n                        title={isTeachersMode ? 'OFF class teachers list change mode' :\n                            'ON class teachers list change mode'}\n                        classes={{tooltip: classes.tooltip}}\n                        placement='left'\n                        arrow\n                        TransitionComponent={Fade}\n                        enterDelay={1000}\n                    >\n                        <span className={request.updating ? classes.progress : ''}>\n                             <Button\n                                 variant='outlined'\n                                 disabled={request.updating}\n                                 className={clsx(classes.buttons, isTeachersMode && classes.buttonsActive)}\n                                 onClick={() => {\n                                     setIsTeachersMode(!isTeachersMode);\n                                     setIsStudentsMode(false);\n                                     setSelectedSubject('all');\n                                 }}\n                             >\n                                <SwapHorizIcon/>\n                                <SupervisedUserCircleIcon/>\n                            </Button>\n                        </span>\n                    </Tooltip>\n                </Grid>\n                <Grid item lg={5}>\n                    <Grid container>\n                        <Grid item lg={8} component='span'>\n                            <Zoom in={isStudentsMode}>\n                                <TextField\n                                    hidden={!isStudentsMode}\n                                    size='small'\n                                    label='search student'\n                                    type='search'\n                                    id='search-student'\n                                    variant='outlined'\n                                    value={filteredStudents}\n                                    onChange={handleFilteredStudents}\n                                />\n                            </Zoom>\n                            <Zoom in={isTeachersMode}>\n                                <FormControl className={classes.selectInput} hidden={!isTeachersMode}>\n                                    <InputLabel id='select-subject'>\n                                        sort by subject\n                                    </InputLabel>\n                                    <Select\n                                        labelId='select-subject'\n                                        value={selectedSubject}\n                                        onChange={handleSelectedSubject}\n                                    >\n                                        <MenuItem value='all'>all</MenuItem>\n                                        {subjects.map((subject, i) => {\n                                            return <MenuItem key={i} value={subject}>{subject}</MenuItem>\n                                        })}\n                                    </Select>\n                                </FormControl>\n                            </Zoom>\n                        </Grid>\n                        <Grid\n                            item\n                            lg={4}\n                            component='span'\n                            style={{display: 'flex', justifyContent: 'center'}}\n                        >\n                            <Grid item lg={6} component='span' style={{display: 'flex', justifyContent: 'space-between'}}>\n                                <Tooltip\n                                    title='Remove current class'\n                                    classes={{tooltip: classes.tooltip}}\n                                    placement='top-end'\n                                    arrow\n                                    TransitionComponent={Fade}\n                                    enterDelay={1000}\n                                >\n                            <span className={request.updating ? classes.progress : ''}>\n                                <IconButton\n                                    disabled={!isDeleteVisible}\n                                    className={classes.buttonDelete}\n                                    onClick={removeClass}\n                                >\n                                    <DeleteIcon/>\n                                </IconButton>\n                            </span>\n                                </Tooltip>\n                            </Grid>\n                            <Grid item lg={6} component='span' style={{display: 'flex', justifyContent: 'center'}}>\n                                <Tooltip\n                                    title='Confirm new list content'\n                                    classes={{tooltip: classes.tooltip}}\n                                    placement='top-end'\n                                    arrow\n                                    TransitionComponent={Fade}\n                                    enterDelay={1000}\n                                >\n                            <span className={request.updating ? classes.progress : ''}>\n                                <IconButton\n                                    disabled={!isChanging || isDeleteVisible}\n                                    className={classes.buttonsActive}\n                                    onClick={confirmUpdate}\n                                >\n                                    <DoneIcon/>\n                                </IconButton>\n                            </span>\n                                </Tooltip>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n};\n\nNavClassPanel.propTypes = {\n    request: PropTypes.object.isRequired,\n    tutor: PropTypes.object.isRequired,\n    possibleTutors: PropTypes.array.isRequired,\n    getModeStatus: PropTypes.func.isRequired,\n    subjects: PropTypes.array.isRequired,\n    getSelectedSubject: PropTypes.func.isRequired,\n    getFilteredStudents: PropTypes.func.isRequired,\n    isChanging: PropTypes.bool.isRequired,\n    classId: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    updateTutor: PropTypes.func.isRequired,\n    confirmUpdate: PropTypes.func.isRequired,\n    getIsTutor: PropTypes.func.isRequired,\n    setModalYesNot: PropTypes.func.isRequired\n};\n\nexport default NavClassPanel;\n","import {connect} from 'react-redux';\nimport {setModalYesNot} from \"../../../redux/actions/valuesActions\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {updateTutorClassRequest} from \"../../../redux/thunks\";\nimport NavClassPanel from \"./NavClassPanel\";\n\nconst mapStateToProps = state => ({\n    request: getRequest(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateTutor: classItem => dispatch(updateTutorClassRequest(classItem)),\n    setModalYesNot: (isOpen, content) => dispatch(setModalYesNot(isOpen, content))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavClassPanel)\n","import {style} from \"../../../styles/global\";\n\nconst componentStyle = theme => ({\n    root: {\n        backgroundColor: theme.palette.secondary.dark,\n        width: '100%',\n        margin: 'auto',\n    },\n    paper: {\n        width: 434,\n        height: 270,\n        overflow: 'auto',\n        transition: '.5s'\n    },\n    button: {\n        margin: theme.spacing(0.5, 0),\n    },\n    description: {\n        padding: style.smallSize\n    },\n    moreWidth: {\n        width: 474,\n        transition: '.5s'\n    },\n    duplicate: {\n        color: '#ff3838'\n    },\n    spinner: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n    }\n});\n\nexport default componentStyle;\n","import React, {useState, useEffect} from 'react';\nimport PropTypes from 'prop-types'\nimport clsx from \"clsx\";\nimport {makeStyles} from '@material-ui/core/styles';\nimport {\n    Grid,\n    Paper,\n    List,\n    ListItem,\n    Typography,\n    ListItemIcon,\n    ListItemText,\n    Checkbox,\n    Button,\n    Zoom\n} from '@material-ui/core';\nimport Spinner from \"../../common/Spinner/Spinner\";\nimport NavClassPanel from \"../NavClassPanel/NavClassPanelContainer\";\nimport componentStyle from \"./ClassContentStyle\";\nimport {sortByLastnameFromAToZ} from \"../../../utilities/functions\";\n\nconst useStyles = makeStyles(theme => componentStyle(theme));\n\nconst not = (a, b) => {\n    return a.filter(value => b.indexOf(value) === -1);\n};\n\nconst intersection = (a, b) => {\n    return a.filter(value => b.indexOf(value) !== -1);\n};\n\nconst ClassContent = props => {\n    const {\n        classItem,\n        request,\n        teachers,\n        possibleTutors,\n        freeStudents,\n        availableSubjects,\n        updateClass,\n        studentMode\n    } = props;\n    const [checked, setChecked] = useState([]);\n    const [leftList, setLeftList] = useState(classItem.students);\n    const [rightList, setRightList] = useState(classItem.subjectTeachers);\n    const [leftDesc, setLeftDesc] = useState('students');\n    const [rightDesc, setRightDesc] = useState('teachers');\n    const [isVisible, setIsVisible] = useState(false);\n    const [isShowButtons, setIsShowButtons] = useState(false);\n    const [isStudentMode, setIsStudentMode] = useState(false);\n    const [isTeacherMode, setIsTeacherMode] = useState(false);\n    const [isTypeStudent, setIsTypeStudent] = useState(true);\n    const [isTypeTeacher, setIsTypeTeacher] = useState(false);\n    const [freeTeachers, setFreeTeachers] = useState([]);\n    const [subjects,] = useState(availableSubjects[`class${classItem.name.substring(6, 7)}`]);\n    const [isChanging, setIsChanging] = useState(false);\n    const [subjectDuplicates, setSubjectDuplicates] = useState([]);\n    const [isTutor, setIsTutor] = useState(false);\n    const classes = useStyles();\n\n    let findDuplicates = arr => arr.filter((item, index) => arr.indexOf(item) !== index);\n\n    useEffect(() => {\n        prepareFreeTeachers();\n        setIsVisible(isStudentMode || isTeacherMode);\n\n        if (isVisible) {\n            setTimeout(() => setIsShowButtons(true), 500);\n        } else {\n            setIsShowButtons(false);\n        }\n\n        if (isStudentMode && !isTeacherMode) {\n            setRightList(freeStudents);\n            setLeftList(classItem.students);\n            setIsTypeTeacher(true);\n            setIsTypeStudent(true);\n            setRightDesc('available students');\n            setLeftDesc('students');\n            setIsTutor(false);\n        } else if (!isStudentMode && isTeacherMode) {\n            setRightList(freeTeachers);\n            setLeftList(classItem.subjectTeachers);\n            setIsTypeStudent(false);\n            setIsTypeTeacher(false);\n            setRightDesc('available teachers');\n            setLeftDesc('teachers');\n            setIsTutor(false);\n        } else {\n            setRightList(classItem.subjectTeachers);\n            setLeftList(classItem.students);\n            setIsTypeTeacher(false);\n            setIsTypeStudent(true);\n            setRightDesc('teachers');\n            setLeftDesc('students');\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isStudentMode, isTeacherMode, isVisible, isShowButtons,\n        teachers, classItem.students, classItem.subjectTeachers]);\n\n    useEffect(() => {\n\n        if (isStudentMode || isTeacherMode) {\n            let first = isStudentMode ? classItem.students.map(student => student.id) :\n                classItem.subjectTeachers.map(teacher => teacher.id);\n            let second = leftList.map(item => item.id);\n            let result = first.length !== second.length;\n\n            if (first.length === second.length) {\n                let counter = 0;\n                first.forEach(item => {\n\n                    if (second.includes(item)) counter++;\n                });\n                result = (counter !== first.length);\n            }\n            setIsChanging(result);\n        } else {\n            setIsChanging(false);\n        }\n\n        if (isTeacherMode) {\n            let subjects = leftList.map(item => item.subject);\n            setSubjectDuplicates(findDuplicates(subjects));\n            if (findDuplicates(subjects).length > 0) setIsChanging(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [leftList]);\n\n    const leftChecked = intersection(checked, leftList);\n    const rightChecked = intersection(checked, rightList);\n\n    const confirmUpdate = async () => {\n        await studentMode(isStudentMode);\n        updateClass({\n            id: classItem.id,\n            isStudents: isStudentMode,\n            [isStudentMode ? 'students' : 'subjectTeachers']: leftList\n        });\n    };\n\n    const setSelectedSubject = subject => {\n        subject !== 'all' ?\n            setRightList(freeTeachers.filter(item => item.subject === subject)) : setRightList(freeTeachers);\n    };\n\n    const setFilteredStudents = data => {\n        setRightList(freeStudents.filter(item => (item.lastName.toLowerCase().includes(data.toLowerCase()) ||\n            item.firstName.toLowerCase().includes(data.toLowerCase()))));\n    };\n\n    const prepareFreeTeachers = () => {\n        let result = [];\n        let teachersClassId = classItem.subjectTeachers.map(teacher => teacher.id);\n        teachers.forEach(item => {\n\n            if (!teachersClassId.includes(item.id)) result = [...result, item]\n        });\n        setFreeTeachers(result);\n    };\n\n    const handleToggle = (value) => () => {\n        const currentIndex = checked.indexOf(value);\n        const newChecked = [...checked];\n\n        if (currentIndex === -1) {\n            newChecked.push(value);\n        } else {\n            newChecked.splice(currentIndex, 1);\n        }\n\n        setChecked(newChecked);\n    };\n\n    const getModeStatus = (isStudentMode, isTeacherMode) => {\n        setIsStudentMode(isStudentMode);\n        setIsTeacherMode(isTeacherMode);\n    };\n\n    const handleCheckedRight = () => {\n        setRightList(rightList.concat(leftChecked));\n        setLeftList(not(leftList, leftChecked));\n        setChecked(not(checked, leftChecked));\n    };\n\n    const handleCheckedLeft = () => {\n        setLeftList(leftList.concat(rightChecked));\n        setRightList(not(rightList, rightChecked));\n        setChecked(not(checked, rightChecked));\n    };\n\n    const rowItem = (i, value, isStudent, duplicates) => {\n        const {lastName, firstName, birthDate, subject} = value;\n\n        return (\n            <span style={{whiteSpace: 'nowrap'}}>\n                <Typography display='inline' component='p' color='textSecondary'>{`${i + 1}. `}</Typography>\n                <Typography display='inline' variant='h6' color='textPrimary'>{`${lastName} ${firstName}`}</Typography>\n                {isStudent ?\n                    <Typography display='inline' component='p' color='textSecondary'>\n                        {` d.o.b.: ${birthDate.substring(0, 10)}`}\n                    </Typography> :\n                    <Typography\n                        display='inline'\n                        component='p'\n                        color='textSecondary'\n                        className={duplicates.includes(subject) ? classes.duplicate : ''}\n                    >\n                        {` - ${subject}`}\n                    </Typography>\n                }\n            </span>\n        )\n    };\n\n    const customList = (items, isStudent) => (\n        <Paper\n            className={clsx(classes.paper, !isVisible && classes.moreWidth, request.updating && !isTutor && classes.spinner)}>\n            {(request.updating) && !isTutor ? <Spinner/> :\n                <List dense component=\"div\" role=\"list\">\n                    {items.map((value, i) => {\n                        const labelId = `transfer-list-item-${value}-label`;\n\n                        return (\n                            <ListItem key={value.id} role=\"listitem\" button onClick={handleToggle(value)}>\n                                <ListItemText\n                                    id={labelId}\n                                    style={{margin: 0}}\n                                    primary={rowItem(i, value, isStudent, subjectDuplicates)}\n                                />\n                                <ListItemIcon style={{justifyContent: \"flex-end\"}}>\n                                    <Checkbox\n                                        hidden={!isShowButtons}\n                                        style={{padding: 0}}\n                                        checked={checked.indexOf(value) !== -1}\n                                        tabIndex={-1}\n                                        disableRipple\n                                        inputProps={{'aria-labelledby': labelId}}\n                                    />\n                                </ListItemIcon>\n                            </ListItem>\n                        );\n                    })}\n                    <ListItem/>\n                </List>\n            }\n        </Paper>\n    );\n\n    return (\n        <Grid container spacing={2} justify=\"space-between\" alignItems=\"center\" className={classes.root}>\n            <Grid item>\n                {customList(leftList.sort(sortByLastnameFromAToZ), isTypeStudent)}\n                <Typography className={classes.description} variant='subtitle2'>\n                    {`${leftDesc}: ${request.updating ? '...' : leftList.length}`}\n                </Typography>\n            </Grid>\n            <Zoom in={isShowButtons}>\n                <Grid item hidden={!isShowButtons}>\n                    <Grid container direction=\"column\" alignItems=\"center\">\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            className={classes.button}\n                            onClick={handleCheckedRight}\n                            disabled={leftChecked.length === 0}\n                            aria-label=\"move selected right\"\n                        >\n                            &gt;\n                        </Button>\n                        <Button\n                            variant=\"outlined\"\n                            size=\"small\"\n                            className={classes.button}\n                            onClick={handleCheckedLeft}\n                            disabled={rightChecked.length === 0}\n                            aria-label=\"move selected left\"\n                        >\n                            &lt;\n                        </Button>\n                    </Grid>\n                </Grid>\n            </Zoom>\n            <Grid item>\n                {customList(rightList.sort(sortByLastnameFromAToZ), isTypeTeacher)}\n                <Typography className={classes.description} variant='subtitle2'>\n                    {`${rightDesc}: ${request.updating ? '...' : rightList.length}`}\n                </Typography>\n            </Grid>\n            <NavClassPanel\n                classId={classItem.id}\n                name={classItem.name}\n                tutor={classItem.mainTeacher}\n                possibleTutors={possibleTutors}\n                getModeStatus={getModeStatus}\n                subjects={subjects}\n                getSelectedSubject={setSelectedSubject}\n                getFilteredStudents={setFilteredStudents}\n                isChanging={isChanging}\n                confirmUpdate={confirmUpdate}\n                getIsTutor={isTutor => setIsTutor(isTutor)}\n            />\n        </Grid>\n    )\n};\n\nClassContent.propTypes = {\n    classItem: PropTypes.object.isRequired,\n    request: PropTypes.object.isRequired,\n    teachers: PropTypes.array.isRequired,\n    possibleTutors: PropTypes.array.isRequired,\n    freeStudents: PropTypes.array.isRequired,\n    availableSubjects: PropTypes.object.isRequired,\n    updateClass: PropTypes.func.isRequired,\n    studentMode: PropTypes.func.isRequired\n};\n\nexport default ClassContent\n","import {connect} from 'react-redux';\nimport {getTeachers} from \"../../../redux/actions/usersActions\";\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {getSubjects, setIsStudentMode} from \"../../../redux/actions/valuesActions\";\nimport {getFreeStudents} from \"../../../redux/actions/studentActions\";\nimport {updateClassRequest} from \"../../../redux/thunks\";\nimport ClassContent from \"./ClassContent\";\n\nconst mapStateToProps = state => ({\n    teachers: getTeachers(state),\n    request: getRequest(state),\n    availableSubjects: getSubjects(state),\n    freeStudents: getFreeStudents(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    updateClass: classItem => dispatch(updateClassRequest(classItem)),\n    studentMode: isStudentMode => dispatch(setIsStudentMode(isStudentMode))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClassContent);\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from \"clsx\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppBar, Tabs, Tab, Paper, Typography } from \"@material-ui/core\";\nimport { Zoom } from \"@material-ui/core\";\nimport Spinner from \"../../common/Spinner/Spinner\";\nimport ModalAreYouSure from \"../../common/ModalAreYouSure/ModalAreYouSure\";\nimport componentStyle from \"./ClassesContentStyle\";\nimport { a11yProps, sortByNameFromAToZ } from \"../../../utilities/functions\";\nimport ClassContent from \"../ClassContent/ClassContentContainer\";\n\nconst useStyles = makeStyles(theme => componentStyle(theme));\n\nconst ClassesContent = props => {\n    const {\n        allClasses,\n        classGrade,\n        allStudents,\n        possibleTutors,\n        request,\n        getStudentsById,\n        classesStudents,\n        setFreeStudents,\n        isStudentMode,\n        setIsStudentMode,\n        setSelectedClass,\n        selectedClass,\n        loadDataForClass,\n        teachers,\n        modalYesNot,\n        deleteClass,\n        setModalYesNot,\n        setAddingIsDone,\n        addingIsDone\n    } = props;\n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n    const [newValue, setNewValue] = useState(0);\n    const [isShow, setIsShow] = useState(false);\n    const [isPrepare, setIsPrepare] = useState(false);\n    const [filteredClass, setFilteredClass] = useState(allClasses);\n    const [classGradeIn, setClassGradeIn] = useState('none');\n    const [isDelete, setIsDelete] = useState(false);\n\n    useEffect(() => {\n\n        if (addingIsDone) {\n            setValue(0);\n            setNewValue(0);\n            prepareContentClass();\n            setAddingIsDone(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [addingIsDone])\n\n    useEffect(() => {\n\n        if (classGrade !== classGradeIn) {\n            setValue(0);\n            setFilteredClass(allClasses.filter(classItem => classItem.name.includes(classGrade)));\n            setClassGradeIn(classGrade);\n            setIsPrepare(false);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [classGrade]);\n\n    useEffect(() => {\n\n        if (classesStudents.length && isStudentMode) prepareFreeStudents();\n\n        if (classGrade !== 'none') {\n            setFilteredClass(allClasses.filter(classItem => classItem.name.includes(classGrade)));\n            setClassGradeIn(classGrade);\n        } else {\n            setFilteredClass(allClasses.sort(sortByNameFromAToZ));\n            setClassGradeIn(classGrade);\n        }\n\n        if (filteredClass.length && !isPrepare && teachers.length) prepareContentClass();\n        setIsShow(Object.entries(selectedClass).length > 0 && isPrepare);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [allClasses, classGrade, filteredClass.length, teachers.length, selectedClass, classGradeIn]);\n\n    const prepareContentClass = () => {\n        setIsPrepare(true);\n        let classItem = filteredClass[value];\n        classItem.mainTeacher = teachers.find(teacher => (teacher.id === classItem.mainTeacher.id));\n        setSelectedClass(classItem);\n        loadDataForClass(classItem.id);\n    };\n\n    const prepareFreeStudents = () => {\n        setIsStudentMode(false);\n        let result = [];\n        allStudents.forEach(id => {\n\n            if (!classesStudents.includes(id)) result.push(id)\n        });\n        result.length ? getStudentsById(result) : setFreeStudents([]);\n    };\n\n    const handleChange = (event, newValue) => {\n        setIsShow(false);\n        setNewValue(newValue);\n    };\n\n    const changeClass = async () => {\n        await setIsPrepare(false);\n        await setValue(newValue);\n        await setSelectedClass({});\n        loadDataForClass(filteredClass[newValue].id);\n    };\n\n    const removeClass = async isConfirm => {\n\n        if (isConfirm) {\n            await setIsDelete(true);\n            await setIsShow(false);\n        }\n        setModalYesNot(false, modalYesNot.content);\n    };\n\n    const deleteGo = async () => {\n        setValue(0);\n        setNewValue(0);\n        await deleteClass(modalYesNot.content.data.id);\n        await setSelectedClass({});\n        setIsDelete(false);\n        setModalYesNot(false, { description: '', data: {} });\n    };\n\n    return (\n        <Paper\n            elevation={3}\n            className={clsx(classes.root, !filteredClass.length && classes.nothing)}>\n            {filteredClass.length ?\n                <>\n                    <AppBar position='static' className={classes.tabs}>\n                        <Tabs\n                            value={value}\n                            onChange={handleChange}\n                            textColor=\"primary\"\n                            indicatorColor='secondary'\n                            variant='scrollable'\n                            scrollButtons='auto'\n                        >\n                            {filteredClass.map((item, i) => {\n                                return <Tab className={classes.tabs} key={item.id} disabled={request.geting}\n                                    label={item.name}  {...a11yProps(i)} />\n                            })}\n                        </Tabs>\n                    </AppBar>\n                    <Paper className={classes.content}>\n                        {request.geting ? <Spinner style={{ marginLeft: '92px', marginTop: '55px' }} /> :\n                            <Zoom\n                                in={isShow}\n                                timeout={500}\n                                onExited={isDelete ? deleteGo : changeClass}\n                            >\n                                <Paper elevation={4} style={{ width: '100%' }}>\n                                    {((Object.entries(selectedClass).length > 0)) &&\n                                        <ClassContent\n                                            classItem={selectedClass}\n                                            possibleTutors={possibleTutors}\n                                        />}\n                                </Paper>\n                            </Zoom>\n                        }\n                    </Paper>\n                </> : <Typography variant='h6'>Nothing to show...</Typography>\n            }\n            <ModalAreYouSure\n                description={modalYesNot.content.description}\n                isOpen={modalYesNot.isOpen}\n                isConfirm={removeClass} />\n        </Paper>\n    )\n};\n\nClassesContent.propTypes = {\n    allClasses: PropTypes.arrayOf(PropTypes.shape({\n        students: PropTypes.array.isRequired,\n        subjectTeachers: PropTypes.array.isRequired,\n        id: PropTypes.string.isRequired,\n        _id: PropTypes.string,\n        name: PropTypes.string.isRequired\n    })),\n    classGrade: PropTypes.string.isRequired,\n    classesStudents: PropTypes.array.isRequired,\n    allStudents: PropTypes.array.isRequired,\n    possibleTutors: PropTypes.array.isRequired,\n    request: PropTypes.object.isRequired,\n    getStudentsById: PropTypes.func.isRequired,\n    setFreeStudents: PropTypes.func.isRequired,\n    isStudentMode: PropTypes.bool.isRequired,\n    setIsStudentMode: PropTypes.func.isRequired,\n    setSelectedClass: PropTypes.func.isRequired,\n    selectedClass: PropTypes.object.isRequired,\n    loadDataForClass: PropTypes.func.isRequired,\n    teachers: PropTypes.array.isRequired,\n    modalYesNot: PropTypes.object.isRequired,\n    setModalYesNot: PropTypes.func.isRequired,\n    deleteClass: PropTypes.func.isRequired,\n    addingIsDone: PropTypes.bool.isRequired,\n    setAddingIsDone: PropTypes.func.isRequired\n};\n\nexport default ClassesContent;\n","import {connect} from 'react-redux';\nimport {getRequest} from \"../../../redux/actions/requestActions\";\nimport {getAllClasses, getSelectedClass, setSelectedClass} from \"../../../redux/actions/classActions\";\nimport {getTeachers} from \"../../../redux/actions/usersActions\";\nimport {getIsStudentMode, setIsStudentMode, getModalYesNot, setModalYesNot, getAddingIsDone, setAddingIsDone} from \"../../../redux/actions/valuesActions\";\nimport {getAllStudents, getClassesStudents, setFreeStudents} from \"../../../redux/actions/studentActions\";\nimport {getStudentsByIdRequest, loadDataForClassByIdRequest, deleteClassByIdRequest} from \"../../../redux/thunks\";\nimport ClassesContent from './ClassesContent'\n\nconst mapStateToProps = state => ({\n    allClasses: getAllClasses(state),\n    allStudents: getAllStudents(state),\n    request: getRequest(state),\n    classesStudents: getClassesStudents(state),\n    isStudentMode: getIsStudentMode(state),\n    selectedClass: getSelectedClass(state),\n    teachers: getTeachers(state),\n    modalYesNot: getModalYesNot(state),\n    addingIsDone: getAddingIsDone(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    getStudentsById: studentsId => dispatch(getStudentsByIdRequest(studentsId)),\n    setFreeStudents: students => dispatch(setFreeStudents(students)),\n    setSelectedClass: classItem => dispatch(setSelectedClass(classItem)),\n    loadDataForClass: id => dispatch(loadDataForClassByIdRequest(id)),\n    setIsStudentMode: isStudentMode => dispatch(setIsStudentMode(isStudentMode)),\n    deleteClass: id => dispatch(deleteClassByIdRequest(id)),\n    setModalYesNot: (isOpen, content) => dispatch(setModalYesNot(isOpen, content)),\n    setAddingIsDone: isDone => dispatch(setAddingIsDone(isDone))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClassesContent);\n","import {style} from \"../../../styles/global\";\n\nconst componentStyle = theme => ({\n    root: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        height: style.contentHeight,\n        width: '100%',\n        padding: `0 ${style.baseSize}`\n    },\n});\n\nexport default componentStyle;\n","import React, {useState, useEffect} from \"react\";\nimport PropTypes from 'prop-types';\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {Paper} from \"@material-ui/core\";\nimport Spinner from \"../../common/Spinner/Spinner\";\nimport ClassesPanel from \"../ClassesPanel/ClassesPanelContainer\";\nimport ClassesContent from \"../ClassesContent/ClassesContentContainer\";\nimport Alert from \"../../common/Alert/Alert\";\nimport componentStyle from \"./ClassesHandlingStyle\";\n\nconst useStyles = makeStyles(theme => componentStyle(theme));\n\n\nconst ClassesHandling = props => {\n    const {\n        request,\n        loadAllClasses,\n        loadAllStudents,\n        loadStudentsIdFromClasses,\n        resetRequest,\n        alertSuccess,\n        setAlertSuccess,\n        clearAllClasses,\n        clearAllStudents,\n        clearFreeStudents,\n        clearClassesStudents,\n        clearSelectedClass,\n        clearTeachers,\n        allClasses,\n        setIsStudentMode,\n        setTutorIsUse\n    } = props;\n    const [classGrade, setClassGrade] = useState('none');\n    const [possibleTutors, setPossibleTutors] = useState([]);\n    const classes = useStyles();\n\n    useEffect(() => {\n        resetRequest();\n        loadAllClasses();\n        loadAllStudents();\n        loadStudentsIdFromClasses();\n\n        return () => {\n            clearAllClasses([]);\n            clearAllStudents([]);\n            clearFreeStudents([]);\n            clearClassesStudents([]);\n            clearSelectedClass({});\n            clearTeachers([]);\n            setIsStudentMode(true);\n            setTutorIsUse(true);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const handleError = () => {\n        resetRequest();\n        loadAllClasses();\n    };\n\n    const getClassGrade = classGrade => {\n        setClassGrade(classGrade);\n    };\n\n    const getPossibleTutors = possibleTutors => {\n        setPossibleTutors(possibleTutors);\n    };\n\n    return (\n        <Paper variant='outlined' className={classes.root}>\n            {request.pending && <Spinner/>}\n            {(request.success && allClasses.length) ?\n            <>\n                <ClassesPanel getPossibleTutors={getPossibleTutors} getClassGrade={getClassGrade}/>\n                <ClassesContent possibleTutors={possibleTutors} classGrade={classGrade}/>\n            </> : <></>\n            }\n            {request.error &&\n            <Alert\n                isOpenAlert={request.error !== null}\n                variant='error'\n                handleCloseHandling={handleError}\n                message={request.error}\n            />\n            }\n            {alertSuccess.isOpen &&\n            <Alert\n                isOpenAlert={alertSuccess.isOpen}\n                variant='success'\n                handleCloseHandling={() => setAlertSuccess(false, '')}\n                message={alertSuccess.message}\n            />}\n        </Paper>\n    )\n};\n\nClassesHandling.propTypes = {\n    request: PropTypes.object.isRequired,\n    loadAllClasses: PropTypes.func.isRequired,\n    loadAllStudents: PropTypes.func.isRequired,\n    loadStudentsIdFromClasses: PropTypes.func.isRequired,\n    resetRequest: PropTypes.func.isRequired,\n    alertSuccess: PropTypes.object.isRequired,\n    setAlertSuccess: PropTypes.func.isRequired,\n    clearAllClasses: PropTypes.func.isRequired,\n    clearAllStudents: PropTypes.func.isRequired,\n    clearFreeStudents: PropTypes.func.isRequired,\n    clearClassesStudents: PropTypes.func.isRequired,\n    clearSelectedClass: PropTypes.func.isRequired,\n    clearTeachers: PropTypes.func.isRequired,\n    allClasses: PropTypes.array.isRequired,\n    setIsStudentMode: PropTypes.func.isRequired,\n    setTutorIsUse: PropTypes.func.isRequired\n};\n\nexport default ClassesHandling;\n","import {connect} from 'react-redux';\nimport ClassesHandling from \"./ClassesHandling\";\nimport {\n    loadAllClasses,\n    getAllClasses,\n    setSelectedClass\n} from \"../../../redux/actions/classActions\";\nimport {\n    loadAllStudents,\n    setFreeStudents,\n    setClassesStudents\n} from \"../../../redux/actions/studentActions\";\nimport {\n    loadAllClassesRequest,\n    getStudentsIdRequest,\n    loadStudentsIdFromClasses\n} from \"../../../redux/thunks\";\nimport {\n    getRequest,\n    resetRequest\n} from \"../../../redux/actions/requestActions\";\nimport {\n    setAlertSuccess,\n    getAlertSuccess,\n    setIsStudentMode,\n    setTutorIsUse\n} from \"../../../redux/actions/valuesActions\";\nimport {loadTeachers} from \"../../../redux/actions/usersActions\";\n\nconst mapStateToProps = state => ({\n    request: getRequest(state),\n    alertSuccess: getAlertSuccess(state),\n    allClasses: getAllClasses(state)\n});\n\nconst mapDispatchToProps = dispatch => ({\n    clearAllClasses: data => dispatch(loadAllClasses(data)),\n    clearAllStudents: data => dispatch(loadAllStudents(data)),\n    clearFreeStudents: data => dispatch(setFreeStudents(data)),\n    clearClassesStudents: data => dispatch(setClassesStudents(data)),\n    clearSelectedClass: data => dispatch(setSelectedClass(data)),\n    clearTeachers: data => dispatch(loadTeachers(data)),\n    setIsStudentMode: isStudentMode => dispatch(setIsStudentMode(isStudentMode)),\n    setTutorIsUse: tutorIsUse => dispatch(setTutorIsUse(tutorIsUse)),\n    loadAllClasses: () => dispatch(loadAllClassesRequest()),\n    loadAllStudents: () => dispatch(getStudentsIdRequest()),\n    loadStudentsIdFromClasses: () => dispatch(loadStudentsIdFromClasses()),\n    resetRequest: () => dispatch(resetRequest()),\n    setAlertSuccess: (isOpen, message) => dispatch(setAlertSuccess(isOpen, message))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ClassesHandling)\n","import React from 'react';\nimport PageTitle from '../../common/PageTitle/PageTitle';\nimport ClassesHandling from \"../../features/ClassesHandling/ClassesHandlingContainer\";\n\nconst Classes = () => (\n    <div>\n        <PageTitle>Classes</PageTitle>\n        <ClassesHandling/>\n    </div>\n);\n\nexport default Classes;\n"],"sourceRoot":""}